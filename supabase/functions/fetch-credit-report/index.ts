
// Follow this setup guide to integrate the Deno runtime into your Supabase project:
// https://deno.land/manual/getting_started/introduction

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.24.0";

interface RequestBody {
  vendorId: string;
}

serve(async (req: Request) => {
  try {
    // Create a Supabase client with Auth context
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: "Missing Authorization header" }),
        { status: 401, headers: { "Content-Type": "application/json" } }
      );
    }
    
    // Extract the JWT token
    const token = authHeader.replace("Bearer ", "");
    
    // Create a Supabase client with the token
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? "",
      { global: { headers: { Authorization: `Bearer ${token}` } } }
    );
    
    // Parse request body
    const { vendorId } = await req.json() as RequestBody;
    if (!vendorId) {
      return new Response(
        JSON.stringify({ error: "Missing vendor ID" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // Get vendor information
    const { data: vendor, error: vendorError } = await supabaseClient
      .from("vendors")
      .select("company_name")
      .eq("id", vendorId)
      .single();
      
    if (vendorError) {
      return new Response(
        JSON.stringify({ error: "Failed to fetch vendor", details: vendorError }),
        { status: 404, headers: { "Content-Type": "application/json" } }
      );
    }
    
    // Simulate external API call to get a credit report
    // In a real application, this would be a call to a credit reporting service
    
    // For demo purposes, we'll generate a sample PDF file
    // In a real application, you'd get a real PDF from the API
    const samplePdfBase64 = "";
    
    // Create a filename for the report
    const dateStr = new Date().toISOString().split('T')[0];
    const filename = `credit_report_${vendor.company_name.replace(/\s+/g, '_')}_${dateStr}.pdf`;
    const filePath = `reports/${vendorId}/${filename}`;
    
    // Save to Supabase Storage
    const { error: storageError } = await supabaseClient.storage
      .from("reports")
      .upload(filePath, Uint8Array.from(atob(samplePdfBase64), c => c.charCodeAt(0)), {
        contentType: "application/pdf",
        cacheControl: "3600"
      });
      
    if (storageError) {
      return new Response(
        JSON.stringify({ error: "Failed to upload report", details: storageError }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
    
    // Create a record in the vendor_reports table
    const { error: reportError } = await supabaseClient
      .from("vendor_reports")
      .insert({
        vendor_id: vendorId,
        file_path: filePath
      });
      
    if (reportError) {
      return new Response(
        JSON.stringify({ error: "Failed to record report", details: reportError }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }

    return new Response(
      JSON.stringify({ success: true, message: "Credit report fetched successfully" }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
});
