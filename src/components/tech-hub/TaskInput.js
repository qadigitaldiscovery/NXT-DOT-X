import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
const TaskInput = ({ persona, taskInput, setTaskInput, targetModule, setTargetModule, handleInvokePersona, isLoading }) => {
    return (_jsxs(Card, { className: "mt-4", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-lg", children: "Your Task" }), _jsxs(CardDescription, { children: ["Describe what you want ", persona.name, " to help you with"] })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsx(Textarea, { placeholder: `What would you like the ${persona.name} to do?`, value: taskInput, onChange: (e) => setTaskInput(e.target.value), className: "min-h-[120px]" }), _jsxs("div", { children: [_jsx(Label, { className: "text-sm font-medium mb-2", children: "Forward results to:" }), _jsxs(RadioGroup, { value: targetModule, onValueChange: setTargetModule, className: "grid grid-cols-2 gap-2 mt-1", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(RadioGroupItem, { value: "none", id: "none" }), _jsx(Label, { htmlFor: "none", children: "No forwarding" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(RadioGroupItem, { value: "api", id: "api" }), _jsx(Label, { htmlFor: "api", children: "API Management" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(RadioGroupItem, { value: "cloud", id: "cloud" }), _jsx(Label, { htmlFor: "cloud", children: "Cloud Services" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(RadioGroupItem, { value: "settings", id: "settings" }), _jsx(Label, { htmlFor: "settings", children: "Settings" })] })] })] })] }), _jsx(CardFooter, { children: _jsx(Button, { className: "w-full", onClick: handleInvokePersona, disabled: isLoading || !taskInput.trim(), children: isLoading ? "Processing..." : `Invoke ${persona.name}` }) })] }));
};
export default TaskInput;
